@page
@model Blackjack.Web.Pages.IndexModel
@using static Blackjack.Web.Pages.IndexModel 


<section class="container py-3">

  <header class="d-flex align-items-center justify-content-between mb-3">
    <h3 class="m-0">Blackjack</h3>
    <div class="fs-5">Bank: $@Model.Bank</div>
    <div class="fs-5">Score: @Model.PlayerTotalScore</div>
  </header>

  @if (Model.IsBroke)
  {
    <div class="alert alert-danger">You're out of money.</div>
    <form method="post" class="mb-3" >
      <button type="submit" asp-page-handler="NewRun" class="btn btn-primary">New Run</button>
    </form>
  }
  else
  {
    @if (Model.Ui == UiState.NotStarted || Model.Ui == UiState.PreDeal || Model.Ui == UiState.PostHand)
    {
      <form method="post" class="mb-3 d-flex gap-3 align-items-end">
        <div>
          <label for="bet" class="form-label">Bet</label>
          <input id="bet" name="Bet" type="number" step="0.01" min="0.01" class="form-control" />
        </div>
        <div>
          <label class="form-label invisible">.</label>
          <button type="submit" asp-page-handler="Start" class="btn btn-success">Deal</button>
        </div>
      </form>
    }

    @if (Model.Ui == UiState.InHand)
    {
      <form method="post" class="mb-3 d-flex gap-2 flex-wrap">
        <button type="submit" asp-page-handler="PlayerHit" class="btn btn-secondary">Hit</button>
        <button type="submit" asp-page-handler="PlayerStand" class="btn btn-warning">Stand</button>

        @if (Model.PlayerHandDouble)
        {
          <button type="submit" asp-page-handler="PlayerDouble" class="btn btn-info">Double</button>
        }
        @if (Model.PlayerHandSplittable)
        {
          <button type="submit" asp-page-handler="PlayerSplit" class="btn btn-info">Split</button>
        }
      </form>
    }
  }

  @if (!string.IsNullOrWhiteSpace(Model.Message))
  {
    <div class="alert alert-light border">@Model.Message</div>
  }

  @if (Model.Ui != UiState.NotStarted)
  {
    <div class="row g-3">
      <div class="col-12 col-md-6">
        <h5 class="mb-2">Player</h5>

        <div class="hand mb-2">
          @if (Model.CurrentPlayerCards is not null)
          {
            foreach (var c in Model.CurrentPlayerCards)
            {
              <div class="card-wrap" data-tilt title="@($"{c.CardMaterial} | {c.Coat}")">
                <playing-card rank="@c.Rank" suit="@c.Suit" coat="@c.Coat" material="@c.CardMaterial"></playing-card>
              <div class="holo"></div>
              </div>
            }
          }
        </div>

        <div class="mb-3"><strong>Total:</strong> @Model.PlayerCardScore</div>

        @if (Model.CurrentPlayerCardsB is not null && Model.CurrentPlayerCardsB.Count > 0)
        {
          <h6>Player (Hand 2)</h6>
          <div class="hand">
            @foreach (var c in Model.CurrentPlayerCardsB)
            {
              <div class="card-wrap" data-tilt title="@($"{c.CardMaterial} | {c.Coat}")">
                <playing-card rank="@c.Rank" suit="@c.Suit" coat="@c.Coat" material="@c.CardMaterial"></playing-card>
              <div class="holo"></div>
              </div>
            }
          </div>
        }
      </div>

      <div class="col-12 col-md-6">
        <h5 class="mb-2">Dealer</h5>
        <div class="hand mb-2">
          @if (Model.DealerCards.Count == 0)
          {
            <text></text>
          }
          else if (!Model.RevealDealerHole)
          {

            var first = Model.DealerCards[0];

            <div class="card-wrap" data-tilt title="@($"{first.CardMaterial} | {first.Coat}")">
              <playing-card rank="@first.Rank" suit="@first.Suit" coat="@first.Coat" material="@first.CardMaterial"></playing-card>
            <div class="holo"></div>
            </div>

            var hidden = Math.Max(0, Model.DealerCards.Count - 1);
            for (int i = 0; i < hidden; i++)
            {
                <div class="card-wrap" data-tilt>
                  <playing-card-back></playing-card-back>
                <div class="holo"></div>
                </div>
            }
          }
          else
          {

            @foreach (var c in Model.DealerCards)
            {
                <div class="card-wrap" data-tilt title="@($"{c.CardMaterial} | {c.Coat}")">
                  <playing-card rank="@c.Rank" suit="@c.Suit" coat="@c.Coat" material="@c.CardMaterial"></playing-card>
                <div class="holo"></div>
                </div>
            }
          }
        </div>
      </div>

      </div>
    }

</section>
